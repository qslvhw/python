class Solution(object):
    def uniquePathsWithObstacles(self, obstacleGrid):
        """
        :type obstacleGrid: List[List[int]]
        :rtype: int
        """
        if obstacleGrid[0][0] == 1:
            return 0
        m = len(obstacleGrid)
        n = len(obstacleGrid[0])
        dp = [[0 for x in range(n)] for x in range(m)]
        dp[0][0] = 1
        for x in range(1, m):
            dp[x][0] = dp[x - 1][0] if obstacleGrid[x][0] == 0 else 0
        for y in range(1, n):
            dp[0][y] = dp[0][y - 1] if obstacleGrid[0][y] == 0 else 0
        
        for x in range(1, m):
            for y in range(1, n):
                if obstacleGrid[x][y] == 1:
                    dp[x][y] = 0
                else:
                    dp[x][y] = dp[x - 1][y] + dp[x][y - 1]
        return dp[m - 1][n - 1]
             
